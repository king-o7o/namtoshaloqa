import asyncio
import json
import logging
import time
from pathlib import Path
from typing import List

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ChatType, ParseMode
from aiogram.exceptions import TelegramRetryAfter, TelegramNetworkError
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties


BOT_TOKEN = ""
SOURCE_CHAT_IDS: set[int] = {
    -1001433669620, # @namangantoshkent24
    -1001327239978, # @Namangantoshkent26
    -1001737181397, # @Namangan_toshkent_taksi_29
}

KEYWORDS = ["http://", "https://", "t.me/", "–æ–ª–∞–º–∏–∑", "olamiz", "ketamiz", "üí∏", "‚ö°Ô∏è", "üî•", "‚ÇΩ", "$","–¥–µ–Ω—å–≥–∏", "–û –õ –ê –ú –ò –ó", "—Ä—É–±", "—Ç—ã—Å", "–∑–∞—Ä–∞–±–æ—Ç", "–Ω–∞", "–æ–¥–∞–º –æ–ª–∞–º–∏–∑", "–ø–æ—á—Ç–∞ –æ–ª–∞–º–∏–∑", "—é—Ä–∞–º–∏–∑", "–º–∞—à–∏–Ω–∞", "–∂–µ–Ω—Ç—Ä–∞", "–∫–æ–±–∞–ª—Ç", "–±–µ–∑ –∑–∞–ø—Ä–∞–≤–∫–∞", "—Ç–µ–ª", "—Ç–µ–ª–µ—Ñ–æ–Ω", "üèñ", "üë®‚Äçü¶±", "üë©‚Äçü¶∞", "üíå", "üöî"]

RECIPIENTS_FILE = Path("recipients.json")

ADMINS: list[int] = [1189419672, 1602393068]

logging.basicConfig(
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
    level=logging.INFO,
)

log = logging.getLogger("bot")

router = Router()


# --- JSON ---
def load_recipients() -> List[int]:
    if not RECIPIENTS_FILE.exists():
        log.warning("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π.", RECIPIENTS_FILE)
        save_recipients([])
        return []
    try:
        data = json.loads(RECIPIENTS_FILE.read_text(encoding="utf-8"))
        recips = list(map(int, data.get("recipients", [])))
        log.info("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.", len(recips))
        return recips
    except Exception:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s, –∏—Å–ø–æ–ª—å–∑—É—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.", RECIPIENTS_FILE)
        return []


def save_recipients(recipients: List[int]) -> None:
    data = {"recipients": recipients}
    RECIPIENTS_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False))
    log.info("–°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω (%d —à—Ç.).", len(recipients))


recipients: List[int] = load_recipients()
# --- #


# --- HANDLER–´ ---
@router.message(Command("start"), F.chat.type == ChatType.PRIVATE)
async def cmd_start(message: Message) -> None:
    await message.answer(f"üëã –ê—Å—Å–∞–ª–æ–º—É –∞–ª–µ–π–∫—É–º!\nID: <code>{message.from_user.id}</code>")
    if message.from_user.id in ADMINS:
        await message.answer("–°–∏–∑ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏—Å–∏–∑. “ö–∞–±—É–ª “õ–∏–ª—É–≤—á–∏–ª–∞—Ä–Ω–∏ –±–æ—à“õ–∞—Ä–∏—à —É—á—É–Ω /add, /remove –≤–∞ /list –±—É–π—Ä—É“õ–ª–∞—Ä–∏–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.\n\n–ú–∏—Å–æ–ª: <code>/add 123456789</code>")


@router.message(F.chat.id.in_(SOURCE_CHAT_IDS) & F.text)
async def relay_message(message: Message, bot: Bot) -> None:
    txt = (message.text or "").lower()

    if any(kw in txt for kw in KEYWORDS):
        return

    for user_id in recipients:
        try:
            # –∞) –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            await bot.forward_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
            )

            # –±) –¥–æ–ø —Å–æ–æ–±—â–µ–Ω–∏–µ
            info_text = build_info_text(message)
            await bot.send_message(
                chat_id=user_id,
                text=info_text,
                disable_web_page_preview=True,
            )
        except Exception:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é %s", user_id)


def build_info_text(message: Message) -> str:
    user = message.from_user
    full_name = (user.full_name or "‚Äî").replace("<", "&lt;").replace(">", "&gt;")
    username = f"@{user.username}" if user.username else "–ô–æ“õ"
    link = (
        f"https://t.me/{message.chat.username}/{message.message_id}"
        if message.chat.username
        else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    )

    return (
        "‚úÖ –ú–∏–∂–æ–∑ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç:\n"
        f"üë§ –ò—Å–º ‚Äî <a href=\"tg://user?id={user.id}\">{full_name}</a>\n"
        f"üí¨ Username ‚Äî {username}\n\n"
        f"üîó {link}"
    )

# --- ADMIN PANEL--- #
def admin_only(handler):
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ADMINS:
            await message.reply("‚õîÔ∏è –°–∏–∑–¥–∞ –µ—Ç–∞—Ä–ª–∏ “≥—É“õ—É“õ –π—û“õ.")
            log.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—É.", message.from_user.id)
            return
        return await handler(message, *args, **kwargs)

    return wrapper


@router.message(Command("add"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_add(message: Message, **kwargs) -> None:
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2 or not parts[1].lstrip("-").isdigit():
        await message.reply("–§–æ–π–¥–∞–ª–∞–Ω–∏—à: /add [user_id]")
        return

    uid = int(parts[1])
    if uid in recipients:
        await message.reply("–ë—É id —Ä—û–π—Ö–∞—Ç–¥–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω –º–∞–≤–∂—É–¥.")
        return

    recipients.append(uid)
    save_recipients(recipients)
    await message.reply(f"‚úÖ “ö—û—à–∏–ª–¥–∏: <code>{uid}</code>")
    

@router.message(Command("remove"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_remove(message: Message, **kwargs) -> None:
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2 or not parts[1].lstrip("-").isdigit():
        await message.reply("–§–æ–π–¥–∞–ª–∞–Ω–∏—à: /remove [user_id]")
        return

    uid = int(parts[1])
    if uid not in recipients:
        await message.reply("–ë—É id —Ä—û–π—Ö–∞—Ç–¥–∞ –π—û“õ.")
        return

    recipients.remove(uid)
    save_recipients(recipients)
    await message.reply(f"üóë –é—á–∏—Ä–∏–ª–¥–∏: <code>{uid}</code>")


@router.message(Command("list"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_list(message: Message, **kwargs) -> None:
    if not recipients:
        await message.reply("–†—û–π—Ö–∞—Ç –±—û—à.")
        return
    rows = "\n".join(map(str, recipients))
    await message.reply(f"–ñ–æ—Ä–∏–π “õ–∞–±—É–ª “õ–∏–ª—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n<code>{rows}</code>")


# --- POLLING --- #
async def _start_bot() -> None:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(router)

    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


def main() -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling'–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö."""
    while True:
        try:
            asyncio.run(_start_bot())
        except (KeyboardInterrupt, SystemExit):
            log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            break
        except TelegramRetryAfter as e:
            # Flood-wait
            delay = int(e.retry_after) + 1
            log.warning("Flood-wait %s —Å–µ–∫.", delay)
            time.sleep(delay)
        except TelegramNetworkError:
            log.exception("–ü—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
            time.sleep(5)
        except Exception:
            log.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
            time.sleep(5)


if __name__ == "__main__":
    main()